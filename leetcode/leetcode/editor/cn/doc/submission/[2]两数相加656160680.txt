# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        if l1 is None :
            return l2
        if l2 is None:
            return l1
        
        prehead = ListNode(0) #创建一个val为0的单节点
        head = prehead #指针开始的地方
        carry = 0

        while l1 and l2: #同时
            retain = (l1.val + l2.val + carry)%10
            carry = (l1.val + l2.val + carry )//10
            head.next = ListNode(retain)
            l1 = l1.next
            l2 = l2.next
            head = head.next
        
        while l1: # l1 too long
            retain = (l1.val +carry)%10
            carry = (l1.val +carry)//10
            head.next = ListNode(retain)
            l1 = l1.next
            head = head.next
        
        while l2 :
            retain = (l2.val + carry)%10
            carry = (l2.val + carry)//10
            head.next = ListNode(retain)
            l2 = l2.next
            head = head.next
        
        if carry == 1:
            head.next  = ListNode(carry)

        return prehead.next



        

        




        
# runtime:0 ms
# memory:17.6 MB
